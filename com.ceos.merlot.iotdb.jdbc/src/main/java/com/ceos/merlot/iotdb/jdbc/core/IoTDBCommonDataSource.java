/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ceos.merlot.iotdb.jdbc.core;

import java.io.PrintWriter;
import java.io.Serializable;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.util.Properties;
import java.util.logging.Logger;
import javax.sql.CommonDataSource;

/**
 *
 * @author cgarcia
 */
public class IoTDBCommonDataSource implements CommonDataSource, Serializable {

    public static String IOTDB_DRIVER = "org.apache.iotdb.jdbc.IoTDBDriver";
    protected transient PrintWriter logWriter;
    protected int loginTimeout = 0;    
    protected Properties connectionProps = new Properties();
    protected String description = null;
    protected String dataSourceName = null;
    protected String serverName = null;
    protected String networkProtocol = null;
    protected String user = null;
    protected String password = null;
    protected String url = null;
    
    /*
    * Retrieves the log writer for this DataSource object.
    * The log writer is a character output stream to which all logging and 
    * tracing messages for this data source will be printed. This includes 
    * messages printed by the methods of this object, messages printed 
    * by methods of other objects manufactured by this object, and so on. 
    * Messages printed to a data source specific log writer are not printed 
    * to the log writer associated with the java.sql.DriverManager class. 
    * When a DataSource object is created, the log writer is initially null; 
    * in other words, the default is for logging to be disabled.
    *
    * Returns:
    * the log writer for this data source or null if logging is disabled
    *
    * Throws:
    * SQLException - if a database access error occurs
    */
    @Override
    public PrintWriter getLogWriter() throws SQLException {
        return logWriter;
    }

    
    /*
    * Sets the log writer for this DataSource object to the given 
    * java.io.PrintWriter object.
    * The log writer is a character output stream to which all logging and 
    * tracing messages for this data source will be printed. This includes 
    * messages printed by the methods of this object, messages printed by 
    * methods of other objects manufactured by this object, and so on. 
    * Messages printed to a data source- specific log writer are not printed 
    * to the log writer associated with the java.sql.DriverManager class. 
    * When a DataSource object is created the log writer is initially null; 
    * in other words, the default is for logging to be disabled.
    *
    * Parameters:
    * out - the new log writer; to disable logging, set to null
    * 
    * Throws:
    * SQLException - if a database access error occurs
    */
    @Override
    public void setLogWriter(PrintWriter out) throws SQLException {
        this.logWriter = out;
    }

    /*
    * Sets the maximum time in seconds that this data source will wait 
    * while attempting to connect to a database. A value of zero specifies 
    * that the timeout is the default system timeout if there is one; 
    * otherwise, it specifies that there is no timeout. 
    * When a DataSource object is created, the login timeout is initially zero.
    */
    @Override
    public void setLoginTimeout(int seconds) throws SQLException {
        loginTimeout = seconds;

        connectionProps.setProperty("loginTimeout",
                                    Integer.toString(loginTimeout));
    }

    /*
    * Gets the maximum time in seconds that this data source can wait while
    * attempting to connect to a database. A value of zero means that the 
    * timeout is the default system timeout if there is one; otherwise, 
    * it means that there is no timeout. When a DataSource object is created, 
    * the login timeout is initially zero.
    */
    @Override
    public int getLoginTimeout() throws SQLException {
        return loginTimeout;
    }

    /*
    * Return the parent Logger of all the Loggers used by this data source.
    * This should be the Logger farthest from the root Logger that is still 
    * an ancestor of all of the Loggers used by this data source. 
    * Configuring this Logger will affect all of the log messages 
    * generated by the data source. In the worst case, 
    * this may be the root Logger.
    */
    @Override
    public Logger getParentLogger() throws SQLFeatureNotSupportedException {
        throw new SQLFeatureNotSupportedException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    /**
     * Retrieves the description of the data source. <p>
     *
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Retrieves the name of the data source. <p>
     *
     * @return the description
     */
    public String getDataSourceName() {
        return dataSourceName;
    }

    /**
     * Retrieves the network protocol of the data source. <p>
     *
     * @return the network protocol
     */
    public String getNetworkProtocol() {
        return networkProtocol;
    }

    /**
     * Retrieves the server name attribute. <p>
     *
     * @return the server name attribute
     */
    public String getServerName() {
        return serverName;
    }

    /**
     * Synonym for getUrl().
     *
     * @return the jdbc database connection url attribute
     */
    public String getDatabaseName() {
        return url;
    }

    /**
     * Synonym for getUrl().
     *
     * @return the jdbc database connection url attribute
     */
    public String getDatabase() {
        return url;
    }

    /**
     * Retrieves the jdbc database connection url attribute. <p>
     *
     * @return the jdbc database connection url attribute
     */
    public String getUrl() {
        return url;
    }

    /**
     * Retrieves the jdbc database connection url attribute. <p>
     *
     * @return the jdbc database connection url attribute
     */
    public String getURL() {
        return url;
    }

    /**
     * Retrieves the user name for the connection. <p>
     *
     * @return the username for the connection
     */
    public String getUser() {
        return user;
    }

    /**
     * Synonym for setUrl(String). <p>
     *
     * @param databaseName the new value for the attribute
     */
    public void setDatabaseName(String databaseName) {
        this.url = databaseName;
    }

    /**
     * Synonym for setUrl(String). <p>
     *
     * @param database the new value for the attribute
     */
    public void setDatabase(String database) {
        this.url = database;
    }

    /**
     * Sets the jdbc database URL. <p>
     *
     * @param url the new value of this object's jdbc database connection
     *      url attribute
     */
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Sets the jdbc database URL. <p>
     *
     * @param url the new value of this object's jdbc database connection
     *      url attribute
     */
    public void setURL(String url) {
        this.url = url;
    }

    /**
     * Sets the password for the user name.
     *
     * @param password the password
     */
    public void setPassword(String password) {
        this.password = password;
        connectionProps.setProperty("password", password);
    }

    /**
     * Sets the user name.
     *
     * @param user the user id
     */
    public void setUser(String user) {
        this.user = user;
        connectionProps.setProperty("user", user);
    }

    /**
     * Sets connection properties. If user / password / loginTimeout has been
     * set with one of the setXXX() methods it will be added to the Properties
     * object.
     *
     * @param props properties.  If null, then existing properties will be
     *                           cleared/replaced.
     */
    public void setProperties(Properties props) {

        connectionProps = (props == null) ? new Properties()
                                          : (Properties) props.clone();

        if (user != null) {
            connectionProps.setProperty("user", user);
        }

        if (password != null) {
            connectionProps.setProperty("password", password);
        }

        if (loginTimeout != 0) {
            connectionProps.setProperty("loginTimeout",
                                        Integer.toString(loginTimeout));
        }
    }
    
    
}
